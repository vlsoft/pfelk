# 06-suricata.conf
################################################################################
# Version: 21.01-Beta                                                          #
#                                                                              #
#                                                                              #
#                                                                              #
################################################################################
#
filter {
###################
### Suricat ECS ###
###################
  if "suricata" in [tags] {
    mutate {   
      convert => { "[suricata][eve][flow_id]" => "string" }
      copy => {
        "[suricata][eve][proto]" => "[network][transport]"
        "[suricata][eve][event_type]" => "[event][dataset]"
        "[suricata][eve][flow_id]" => "[event][id]"
        "[suricata][eve][community_id]" => "[network][community_id]"
      }
      replace => {
        "[ecs][version]" => "1.5.0"
      }
      lowercase => [ "[network][transport]" ]
      merge => {"[event][id]" => "[related][id]" }
    }
    mutate {
      copy => {
        "[suricata][eve][src_ip]" => "[client][ip]"
        "[suricata][eve][dest_ip]" => "[server][ip]"
        "[suricata][eve][src_port]" => "[client][port]"
        "[suricata][eve][dest_port]" => "[server][port]"
      }
    }
  }
#######################
### Suricata Events ###
#######################
  if [suricata][eve]  {
    mutate {
      copy => { 
      "[suricata][eve][timestamp]" => "[event][created]"
      "[suricata][eve][alert][severity]" => "[event][severity]"
      "[suricata][eve][alert][action]" => "[event][outcome]"
      "[suricata][eve][event][created]" => "[event][start]"
      }
    }
    if [suricata][eve][event_type] {
      if [suricata][eve][timestamp] {
        date {
          match => [ "[suricata][eve][timestamp]", "YYYY-MM-dd'T'HH:mm:ss.SSSSSSZ" ]
        }
      }
      if [suricata][eve][event_type] {
        mutate {
          add_field => { "[event][kind]" => "event" }
          add_field => { "[event][category]" => "network" }
        }
      }
      if [suricata][eve][event_type] =="alert" {
        mutate {
          replace => { "[event][kind]" => "alert" }
          replace => { "[event][type]" => "denied" }          
          replace => { "[event][category]" => "intrusion_detection" }
        }
      }
      if [suricata][eve][event_type] =="drop" {
        mutate {
          replace => { "[event][kind]" => "alert" }
          replace => { "[event][type]" => "denied" }
          replace => { "[event][category]" => "intrusion_detection" }
        }
      }
      if [suricata][eve][event_type] =="anomaly" {
        mutate {
          replace => { "[event][kind]" => "event" }
          replace => { "[event][category]" => "network" }
        }
      }
  ############################
  ### Suricata Event Types ###
  ############################
      if [suricata][eve][event_type] =="http" {
        mutate {
          replace => { "[event][kind]" => "event" }
          replace => { "[event][type]" => "protocol" }
          replace => { "[event][category]" => "web" }
          replace => { "[network][protocol]" => "http" }
        }
        mutate { 
          convert => { "[suricata][eve][http][status]" => "integer" } 
        }
        if [suricata][eve][http][status] and [suricata][eve][http][status] < 400 {
          mutate {
          add_field => { "[event][outcome]" => "success" }
          }
        }
        if [suricata][eve][http][status] and [suricata][eve][http][status] > 400 {
          mutate {
          add_field => { "[event][outcome]" => "failure" }
          }
        }
      }
      if [suricata][eve][event_type] =="dns" {
        mutate {
          replace => { "[event][kind]" => "event" }
          replace => { "[event][type]" => "protocol" }
          replace => { "[event][category]" => "network" }
          replace => { "[network][protocol]" => "dns" }
        }
      }
      if [suricata][eve][event_type] =="ftp" {
        mutate {
          replace => { "[event][kind]" => "event" }
          replace => { "[event][type]" => "protocol" }
          replace => { "[event][category]" => "network" }
          replace => { "[network][protocol]" => "ftp" }
        }
      }
      if [suricata][eve][event_type] =="ftp_data" {
        mutate {
          replace => { "[event][kind]" => "event" }
          replace => { "[event][type]" => "protocol" }
          replace => { "[event][category]" => "network" }
          replace => { "[network][protocol]" => "ftp" }
        }
      }
      if [suricata][eve][event_type] =="tls" {
        mutate {
          replace => { "[event][kind]" => "event" }
          replace => { "[event][type]" => "protocol" }
          replace => { "[event][category]" => "network" }
          replace => { "[network][protocol]" => "tls" }
        }
      }
      if [suricata][eve][event_type] =="smb" {
        mutate {
          replace => { "[event][kind]" => "event" }
          replace => { "[event][type]" => "protocol" }
          replace => { "[event][category]" => "network" }
          replace => { "[network][protocol]" => "smb" }
        }
      }
      if [suricata][eve][event_type] =="ssh" {
        mutate {
          replace => { "[event][kind]" => "event" }
          replace => { "[event][type]" => "protocol" }
          replace => { "[event][category]" => "network" }
          replace => { "[network][protocol]" => "ssh" }
        }
      }
      if [suricata][eve][event_type] =="flow" {
        mutate {
          replace => { "[event][kind]" => "event" }
          replace => { "[event][type]" => "connection" }
          replace => { "[event][category]" => "network" }
        }
        if [suricata][eve][flow][state] == "new" {
          mutate {
          replace => { "[event][type]" => "start" }
          }
        }
        if [suricata][eve][http][status] == "closed" {
          mutate {
          replace => { "[event][type]" => "end" }
          }
        } else {
          mutate {
          replace => { "[event][type]" => "info" }
          }
        }
      }
      if [suricata][eve][event_type] =="rdp" {
        mutate {
          replace => { "[event][kind]" => "event" }
          replace => { "[event][type]" => "protocol" }
          replace => { "[event][category]" => "network" }
          replace => { "[network][protocol]" => "rdp" }
        }
      }
      if [suricata][eve][event_type] =="stats" {
        mutate {
          replace => { "[event][kind]" => "metric" }
        }
      } 
    }
  }
##########################
### Suricata http data ###
##########################
  if [suricata][eve] {
    if [suricata][eve][http] {
      mutate {
        copy => {
          "[suricata][eve][http][hostname]" => "[url][domain]"
          "[suricata][eve][http][length]" => "[http][response][body][bytes]"
          "[suricata][eve][http][http_method]" => "[http][request][method]"
          "[suricata][eve][http][http_refer]" => "[http][request][referrer]"
          "[suricata][eve][http][http_user_agent]" => "[user_agent][original]"
          "[suricata][eve][http][protocol]" => "[http][version]"
          "[suricata][eve][http][status]" => "[http][response][status_code]"
          "[suricata][eve][http][url]" => "[url][original]"
        }
        copy => { "[url][domain]" => "[@metadata][destination_domain]" }
      }
      # Parse domain names & IPs from host header
      #if [url][domain] {
      #  ruby {
      #    path => "/etc/logstash/conf.d/ruby/logstash-ruby-filter-http-host-related.rb"
      #    script_params => { "source_field" => "[url][domain]" }
      #    tag_on_exception => "_rubyexception-suricata-parse_domains_and_ips_from_http_host"
      #  }
      #}
    }
  }
#########################
### Suricata dns data ###
#########################
  if [suricata][eve] {
    if [suricata][eve][dns] {
      mutate {
        copy => {
          "[suricata][eve][dns][rcode]" => "[dns][response_code]"
          "[suricata][eve][dns][rrtype]" => "[dns][question][type]"
          "[suricata][eve][dns][rrname]" => "[dns][answers][name]"
          "[suricata][eve][dns][answers][rdata]" => "[dns][answers][data]"
        }
        copy => { 
          "[suricata][eve][dns][question][name]" => "[@metadata][destination_domain]" 
          "[suricata][eve][server][ip]" => "[dns][resolved_ip]" 
        }
      }
      if [dns][answers][name] {
        if [dns][question][type] != "PTR" { 
          grok {
            match => ["[dns][answers][name]", "\.(?<dns.question.registered_domain>[^.]+\.[^.]+)$"]
          }
          grok {
            match => ["[dns][answers][name]", "\.(?<dns.question.top_level_domain>[^.]+)$"]
          }
          grok {
            match => ["[dns][answers][name]", "(?<dns.question.subdomain>[a-z0-9-]+)$"]
          }
          mutate {
            copy => {
              "[dns][answers][name]" => "[@metadata][destination_domain]"
            }
          }
          mutate {
           copy => { "[dns][answers][name]" => "[@metadata][destination_domain]" }
          }
        }
      }
      mutate {
        convert => [ "[suricata][eve][dns][aa]", "string" ]
        convert => [ "[suricata][eve][dns][ra]", "string" ]
        convert => [ "[suricata][eve][dns][rd]", "string" ]
        convert => [ "[suricata][eve][dns][tc]", "string" ]
      }
      # responding dns server is authoritative for this answer/response
      if [suricata][eve][dns][aa] == "true" {
        mutate { add_field => { "[dns][header_flags]" => "AA" } }
      }
      # responding dns server supports recursion. A DNS flag specifying whether recursive query support is available in the name server.
      if [suricata][eve][dns][ra] == "true" {
        mutate { add_field => { "[dns][header_flags]" => "RA" } }
      }
      # recursion was requested by the client
      if [suricata][eve][dns][rd] == "true" {
        mutate { add_field => { "[dns][header_flags]" => "RD" } }
      }
      # responding answer/response was truncated
      if [suricata][eve][dns][tc] == "true" {
        mutate { add_field => { "[dns][header_flags]" => "TC" } }
      }
      mutate {
        convert => [ "[suricata][eve][dns][aa]", "boolean" ]
        convert => [ "[suricata][eve][dns][ra]", "boolean" ]
        convert => [ "[suricata][eve][dns][rd]", "boolean" ]
        convert => [ "[suricata][eve][dns][tc]", "boolean" ]
      }
      # Event outcome
      if [suricata][eve][dns][rcode] {
        if [suricata][eve][dns][rcode] == "NOERROR" {
          mutate { add_field => { "[event][outcome]" => "success" } }
        } 
        if [suricata][eve][dns][rcode] == "SERVFAIL" {
          mutate { add_field => { "[event][outcome]" => "failure" } }
        } 
        if [suricata][eve][dns][rcode] == "NXDOMAIN" {
          mutate { add_field => { "[event][outcome]" => "failure" } }
        } 
      }
    }
  }
##########################
### Suricata flow data ###
##########################
  if [suricata][eve] {
    if [suricata][eve][flow] {
      # Populate flow.bytes
      if [suricata][eve][flow][bytes_toclient] {
        if [suricata][eve][flow][bytes_toserver] {
          ruby {
            code => "
              event.set( '[suricata][eve][flow][bytes]', event.get('[suricata][eve][flow][bytes_toclient]').to_i + event.get('[suricata][eve][flow][bytes_toserver]').to_i )
              "
           }
        } else {
          mutate {
            rename => { "[suricata][eve][flow][bytes]" => "%{[suricata][eve][flow][bytes_toclient]}" }
          }
        }
      } else if [suricata][eve][flow][bytes_toserver] {
        mutate {
          rename => { "[suricata][eve][flow][bytes]" => "%{[suricata][eve][flow][bytes_toserver]}" }
        }
      }
      if [suricata][eve][flow][bytes] {
        mutate {
          convert => { "[suricata][eve][flow][bytes]" => "integer" }
        }
      }
      # Populate flow.pkts
      if [suricata][eve][flow][pkts_toclient] {
        if [suricata][eve][flow][pkts_toserver] {
          ruby {
            code => "
              event.set( '[suricata][eve][flow][pkts]', event.get('[suricata][eve][flow][pkts_toclient]').to_i + event.get('[suricata][eve][flow][pkts_toserver]').to_i )
            "
          }
        } else {
          mutate {
            rename => { "[suricata][eve][flow][pkts]" => "%{[suricata][eve][flow][pkts_toclient]}" }
          }
        }
      } else if [suricata][eve][flow][pkts_toserver] {
        mutate {
          rename => { "[suricata][eve][flow][pkts]" => "%{[suricata][eve][flow][pkts_toserver]}" }
        }
      }  
      if [suricata][eve][flow][pkts] {
        mutate {
          convert => { "[suricata][eve][flow][pkts]" => "integer" }
        }
      }
      mutate {
        copy => {
          "[suricata][eve][flow][start]" => "[event][start]"
          "[suricata][eve][flow][end]" => "[event][end]"
          "[suricata][eve][flow][age]" => "[event][duration]"
          "[suricata][eve][flow][bytes_toclient]" => "[server][bytes]"
          "[suricata][eve][flow][bytes_toserver]" => "[client][bytes]"
          "[suricata][eve][flow][pkts_toclient]" => "[server][packets]"
          "[suricata][eve][flow][pkts_toserver]" => "[client][packets]"
        }
      }
      if [event][duration] {
        ruby {
          code => "
            event_duration = event.get('[event][duration]')
            event.set('[event][duration]', event_duration * 1000000)
          "
          tag_on_exception => "_rubyexception-suricata-flow-duration_to_nanoseconds"
        }
      }
      # Add bytes so we can get totals
      if [client][bytes] {
        ruby {
          code => "
            src = event.get('[client][bytes]')
            dst = event.get('[server][bytes]')
            # Destination/Server bytes may not always exist, ie: broadcast
            if !dst.nil?
              total = src + dst
            else
              total = src
            end
            event.set('[network][bytes]', total)
          "
          tag_on_exception => "_rubyexception-suricata-network_bytes"
        }
      }
      # Add packets so we can get totals
      if [client][packets] {
        ruby {
          code => "
            src = event.get('[client][packets]')
            dst = event.get('[server][packets]')
            total = src + dst
            event.set('[network][packets]', total)
          "
          tag_on_exception => "_rubyexception-suricata-network_packets"
        }
      }
      # Process TCP flags.
      if [suricata][eve][tcp][tcp_flags] {
        if [suricata][eve][tcp][ack] {
          mutate {
            add_field => { "[suricata][eve][tcp_flags]" => "ACK" }
          }
        }
        if [suricata][eve][tcp][cwr] {
          mutate {
            add_field => { "[suricata][eve][tcp_flags]" => "CWR" }
          }
        }
        if [suricata][eve][tcp][ece] {
          mutate {
            add_field => { "[suricata][eve][tcp_flags]" => "ECE" }
          }
        }
        if [suricata][eve][tcp][fin] {
          mutate {
            add_field => { "[suricata][eve][tcp_flags]" => "FIN" }
          }
        }
        if [suricata][eve][tcp][psh] {
          mutate {
            add_field => { "[suricata][eve][tcp_flags]" => "PSH" }
          }
        }
        if [suricata][eve][tcp][rst] {
          mutate {
            add_field => { "[suricata][eve][tcp_flags]" => "RST" }
          }
        }
        if [suricata][eve][tcp][syn] {
          mutate {
            add_field => { "[suricata][eve][tcp_flags]" => "SYN" }
          }
        }
        if [suricata][eve][tcp][urg] {
          mutate {
            add_field => { "[suricata][eve][tcp_flags]" => "URG" }
          }
        }
        mutate { 
          remove_field => [ "[tcp][ack]", "[tcp][cwr]", "[tcp][ece]", "[tcp][fin]", "[tcp][psh]", "[tcp][rst]", "[tcp][syn]", "[tcp][urg]" ]
        }
      } else {
        mutate {
          replace => { "[suricata][eve][tcp_flags]" => "none" }
        }
      }     
    }
    # Set message.
    mutate {
      replace => { "[message]" => "Suricata:" }
    }
    if [network][transport] {
      mutate {
        replace => { "[message]" => "%{[message]} %{[network][transport]} connection" }
      }
    }
    if [client][ip] {
      mutate {
        replace => { "[message]" => "%{[message]} from %{[client][ip]}" }
      }
      if [client][port] {
        mutate {
          replace => { "[message]" => "%{[message]}:%{[client][port]}" }
        }
      }
    } else if [client][mac] {
      mutate {
        replace => { "[message]" => "%{[message]} from %{[client][mac]}" }
      }
    }
    if [server][ip] {
      mutate {
        replace => { "[message]" => "%{[message]} to %{[server][ip]}" }
      }
      if [server][port] {
        mutate {
          replace => { "[message]" => "%{[message]}:%{[server][port]}" }
        }
      }
    } else if [server][mac] {
      mutate {
        replace => { "[message]" => "%{[message]} to %{[server][mac]}" }
      }
    }
    if [network][bytes] {
      mutate {
        replace => { "[message]" => "%{[message]}, %{[network][bytes]} bytes" }
      }
    }
    if [network][packets] {
      mutate {
        replace => { "[message]" => "%{[message]}, %{[network][packets]} packets" }
      }
    }   
  }
#####################
### Suricata icmp ###
#####################
  if [network][transport] == "ICMP" or [network][transport] == "IPv6-ICMP" {
    mutate { 
      add_field => { 
      "[client][port]" => "0" 
      "[server][port]" => "0" 
      } 
    }
  }
  if [suricata][eve] {
  # Translate ICMP Types and Codes to text.
    if [suricata][eve][icmp_type] {
      if [suricata][eve][icmp_code] {
        mutate {
          replace => { "[@metadata][icmp_key]" => "%{[suricata][eve][icmp_type]}..%{[suricata][eve][icmp_code]}" }
        }
        if [suricata][eve][ip_version] == "IPv6" {
          translate {
          dictionary_path => "/etc/logstash/conf.d/databases/iana_icmpv6_code.yml"
          field => "[@metadata][icmp_key]"
          destination => "[suricata][eve][icmp_code]"
          override => "true"
          fallback => "unspecified (%{[suricata][eve][icmp_code]})"
          refresh_behaviour => "replace"
          }
        } 
        else {
          translate {
          dictionary_path => "/etc/logstash/conf.d/databases/iana_icmp_code.yml"
          field => "[@metadata][icmp_key]"
          destination => "[suricata][eve][icmp_code]"
          override => "true"
          fallback => "unspecified (%{[suricata][eve][icmp_code]})"
          refresh_behaviour => "replace"
          }
        }
      } 
    
      if [ip_version] == "IPv6" {
        translate {
          dictionary_path => "/etc/logstash/conf.d/databases/iana_icmpv6_type.yml"
          field => "[suricata][eve][icmp_type]"
          destination => "[suricata][eve][icmp_type]"
          override => "true"
          fallback => "unspecified (%{[suricata][eve][icmp_type]})"
          refresh_behaviour => "replace"
        }
      } 
      else {
        translate {
          dictionary_path => "/etc/logstash/conf.d/databases/iana_icmp_type.yml"
          field => "[suricata][eve][icmp_type]"
          destination => "[suricata][eve][icmp_type]"
          override => "true"
          fallback => "unspecified (%{[suricata][eve][icmp_type]})"
          refresh_behaviour => "replace"
        }
      }
    }
    if [response_icmp_type] {
      if [suricata][eve][response_icmp_code] {
        mutate {
          replace => { "[@metadata][icmp_key]" => "%{[suricata][eve][response_icmp_type]}..%{[suricata][eve][response_icmp_code]}" }
        }
        if [suricata][eve][ip_version] == "IPv6" {
          translate {
          dictionary_path => "/etc/logstash/conf.d/databases/iana_icmpv6_code.yml"
          field => "[@metadata][icmp_key]"
          destination => "[suricata][eve][response_icmp_code]"
          override => "true"
          fallback => "unspecified (%{[suricata][eve][response_icmp_code]})"
          refresh_behaviour => "replace"
          }
        } else {
          translate {
          dictionary_path => "/etc/logstash/conf.d/databases/iana_icmp_code.yml"
          field => "[@metadata][icmp_key]"
          destination => "[suricata][eve][response_icmp_code]"
          override => "true"
          fallback => "unspecified (%{[suricata][eve][response_icmp_code]})"
          refresh_behaviour => "replace"
          }
        }
      }
      if [ip_version] == "IPv6" {
        translate {
          dictionary_path => "/etc/logstash/conf.d/databases/iana_icmpv6_type.yml"
          field => "[suricata][eve][response_icmp_type]"
          destination => "[suricata][eve][response_icmp_type]"
          override => "true"
          fallback => "unspecified (%{[suricata][eve][response_icmp_type]})"
          refresh_behaviour => "replace"
        }
      } 
      else {
        translate {
          dictionary_path => "/etc/logstash/conf.d/databases/iana_icmp_type.yml"
          field => "[suricata][eve][response_icmp_type]"
          destination => "[suricata][eve][response_icmp_type]"
          override => "true"
          fallback => "unspecified (%{[suricata][eve][response_icmp_type]})"
          refresh_behaviour => "replace"
        }
      }
    }
  } 
####################
### Suricata smb ###
####################
  if [suricata][eve] {
    if [suricata][eve][smb] {
      mutate {
        copy => {
          "[suricata][eve][smb][accessed]" => "[file][accessed]"
          "[suricata][eve][smb][created]" => "[file][created]"
          "[suricata][eve][smb][modified]" => "[file][modified]"
          "[suricata][eve][smb][filename]" => "[file][name]"
        }
        merge => { "[related][id]" => "[log][id][fuid]" }
      }
    }
  }
####################
### Suricata tls ###
####################
  if [suricata][eve] {
    if  [event][dataset] == "tls" {
      if [suricata][eve][tls] {
        mutate {
          copy => {
            "[suricata][eve][tls][ja3][hash]" => "[tls][client][ja3]"
            "[suricata][eve][tls][ja3s][hash]" => "[tls][server][ja3s]"
          }
        }
        mutate {
          copy => {
            "[suricata][eve][tls][certificate]" => "[tls][server][certificate]"
            "[suricata][eve][tls][chain]" => "[tls][server][certificate_chain]"
            "[suricata][eve][tls][issuerdn]" => "[tls][server][issuer]"
            "[suricata][eve][tls][notafter]" => "[tls][server][not_after]"
            "[suricata][eve][tls][notbefore]" => "[tls][server][not_before]"
            "[suricata][eve][tls][session_resumed]" => "[tls][resumed]"
            "[suricata][eve][tls][sni]" => "[tls][client][server_name]"
            "[suricata][eve][tls][subject]" => "[tls][server][subject]"
            "[suricata][eve][tls][version]" => "[tls][version]"
            "[suricata][eve][tls][hash][sha1]" => "[tls][hash][sha1]"
          }
          copy => { "[suricata][eve][tls][client][server_name]" => "[@metadata][destination_domain]" }
        }  
      }
    }
  }
####################
### Suricata tls ###
####################
  if [suricata][eve] {
    if [suricata][eve][fileinfo] {
      mutate {
        copy => {
          "[suricata][eve][fileinfo][md5]" => "[file][hash][md5]"
          "[suricata][eve][fileinfo][sha1]" => "[file][hash][sha1]"
          "[suricata][eve][fileinfo][sha256]" => "[file][hash][sha256]"
          "[suricata][eve][fileinfo][sha512]" => "[file][hash][sha512]"
          "[suricata][eve][fileinfo][filename]" => "[file][name]"
          "[suricata][eve][fileinfo][size]" => "[file][size]"
        }
      }
    }
  }
}
