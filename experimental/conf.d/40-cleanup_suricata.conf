# 40-cleanup_suricata.conf
################################################################################
# Version: 21.01-Beta                                                          #
# Surcata Clean-up                                                             #
#                                                                              #
#                                                                              #
################################################################################
#
filter {
  if "suricata" in [tags] {
  ######################
  ### tls enrichment ###
  ######################
    # Copy destination domain after Destination.IP and Source.IP alias, otherwise destination gets overwritten and thus would this field
    if [tls] {
      if [tls][client][ja3] { mutate { copy => { "[tls][client][ja3]" => "[tls][fingerprints][ja3][hash]" } } }
      if [tls][server][ja3s] { mutate { copy => { "[tls][server][ja3]" => "[tls][fingerprints][ja3s][hash]" } } }
      mutate {
        copy => {
          "[tls][client][issuer]" => "[tls][client_certificate][issuer][common_name]"
          "[tls][client][certificate][sha1]" => "[tls][client_certificate][fingerprint][sha1]"
          "[tls][client][subject]" => "[tls][client_certificate][subject][common_name]"
          "[tls][server][issuer]" => "[tls][server_certificate][issuer][common_name]"
          "[tls][server][certificate][sha1]" => "[tls][server_certificate][fingerprint][sha1]"
          "[tls][server][subject]" => "[tls][server_certificate][subject][common_name]"
        }
      }
      # lastly, fingerprint sha1 is used as cardinality, and zeek/suricata doesn't have this field - but is added in RockNSM as of 2019-07-10......
      # therefore, check if it exists - otherwise for now "randomize" it just to create it so siem tls stuff works.
      # also, certificates don't really happen in TLS version 1.3 - and we still want to pivot/use the other stuff capture like JA3* hashes and stuff...
      if ![tls][server_certificate][fingerprint][sha1] {
        if [tls][server][ja3s] and [tls][client][server_name] and [tls][server][issuer] and [tls][server][subject] {
          fingerprint {
            concatenate_sources => "true"
            method => "SHA1"
            source => [
              "[tls][server][ja3s]",
              "[tls][server][issuer]",
              "[tls][client][server_name]",
              "[tls][server][subject]"
            ]
            target => "[tls][server_certificate][fingerprint][sha1]"
            add_tag => "siem tls update"
          }
        }
      }     
    }
    # DNS/Domain drill down - most/all based on field dns.question.etld_plus_one exisiting. also requires the network.protocol field
    if [dns] {
      mutate {
        replace => { "[network][protocol]" =>  "dns" }
        copy => { "[domain][1n2_name]" => "[dns][question][etld_plus_one]" }
      }
      # DNS bytes hack since only works with packetbeat which tracks that
      if ![client][bytes] {
        mutate {
          add_field => {
            "[client][bytes]" =>  "0"
            "[server][bytes]" =>  "0"
          }
        }
      }
    }
    # Final Suricata Compatibility
    if [event][module] == "suricata" {
      mutate {
        # Overview tab - populate total event count - uses service.type
        copy => {
          "[event][module]" =>  "[service][type]"
          "[network][protocol]" => "[suricata][eve][proto]"
          "[event][original][alert][signature]" => "[suricata][eve][alert][signature]"
          "[event][original][alert][signature_id]" => "[suricata][eve][alert][signature_id]"
        }
      }
    }
  #####################
  ### IP reputation ###
  ##################### 
    if [client][ip] {
      translate {
        dictionary_path => "/etc/logstash/conf.d/databases/ip_rep_whitelist.yml"
        field => "[client][ip]"
        destination => "[@metadata][src_whitelist]"
        fallback => "false"
        refresh_behaviour => "replace"
      }
      # If not whitelisted, lookup the IP reputation.
      if [@metadata][src_whitelist] == "false" {
        translate {
           dictionary_path => "/etc/logstash/conf.d/databases/ip_rep_basic.yml"
           field => "[client][ip]"
           destination => "[@metadata][src_rep_label]"
           refresh_behaviour => "replace"
        }
        # Parse the IP reputation lable into tags.
        if [@metadata][src_rep_label] {
          ruby {
            init => "require 'csv'"
            code => "event.set('[network][src_rep_tags]', event.get('[@metadata][src_rep_label]').parse_csv)"
          }
        }
      }
    }
    # Lookup server IP reputation.
    # Check if the IP is whitelisted for reputation scoring.
    if [server][ip] {
      translate {
        dictionary_path => "/etc/logstash/conf.d/databases/ip_rep_whitelist.yml"
        field => "[server][ip]"
        destination => "[@metadata][dst_whitelist]"
        fallback => "false"
        refresh_behaviour => "replace"
      }
      # If not whitelisted, lookup the IP reputation.
      if [@metadata][dst_whitelist] == "false" {
        translate {
          dictionary_path => "/etc/logstash/conf.d/databases/ip_rep_basic.yml"
          field => "[server][ip]"
          destination => "[@metadata][dst_rep_label]"
          refresh_behaviour => "replace"
        }
        # Parse the IP reputation lable into tags.
        if [@metadata][dst_rep_label] {
          ruby {
            init => "require 'csv'"
            code => "event.set('[network][dst_rep_tags]', event.get('[@metadata][dst_rep_label]').parse_csv)"
          }
        }
      }
    }
    if [network][dst_rep_tags] or [network][src_rep_tags] {
      ruby {
        init => "require 'csv'"
        code => "
          src_tags = event.get('[@metadata][src_rep_label]')
          dst_tags = event.get('[@metadata][dst_rep_label]')
          if (src_tags)
            rep_tags = src_tags
            if (dst_tags)
              rep_tags = rep_tags << ',' << dst_tags
            end
          else (dst_tags)
            rep_tags = dst_tags
          end
          if (rep_tags)
            event.set('[network][reputation_tags]', rep_tags.parse_csv )
          end
        "
      }
    }
  #####################
  ### Final message ###
  #####################
    if [rule][id] {
      mutate {
        replace => { "[message]" => "[Suricata]: %{[rule][id]} - %{[rule][name]}" }
        replace => { "[related][id]" => "%{[rule][id]}" }
      }
    }
  ############################
  ### Final ECS Conversion ###
  ############################
    # Client Schema to Source Schema
    if [client] {
      mutate {
        copy => { "[client][address]" => "[client][domain]" } 
      } 
      mutate { 
        copy => { "[client]" => "[source]" } 
      }
    }
    # Server Schema to Destination Schema
    if [server] {
      mutate {
        copy => { "[server][address]" => "[server][domain]" } 
      } 
      mutate { 
        copy => { "[server]" => "[destination]" }
      }
    }
    if [@metadata][destination_domain] {
      mutate {
        add_field => {
          "[related][domain]" => "%{[@metadata][destination_domain]}"
          "[related][ip]" => "%{[client][ip]}"
        }
      }
    }
  ###############################
  ### Cleanup metadata object ###
  ###############################
    mutate {
      remove_field => [ 
        "[metadata]",
        "[@version]",
        "[src_ip]",
        "[dest_ip]",
        "[src_port]",
        "[dest_port]",
        "[tx_id]",
        "[in_iface]",
        "[error]",
        "[suricata][eve][http][content_range]"
      ]
      remove_tag => [ "_geoip_lookup_failure]" ]
    }
  }
}
